// app/api/user-queries/[userId]/route.js
import { db } from "@/utils";
import { LEGAL_QUERIES } from "@/utils/schema";
import { NextResponse } from "next/server";
import { eq, desc } from "drizzle-orm";

export async function GET(req, { params }) {
  try {
    const { userId } = params;
    
    if (!userId) {
      return NextResponse.json(
        { message: "User ID is required" },
        { status: 400 }
      );
    }

    // Fetch user's legal queries from database
    const queries = await db
      .select({
        id: LEGAL_QUERIES.id,
        original_issue: LEGAL_QUERIES.original_issue,
        issue_summary: LEGAL_QUERIES.issue_summary,
        applicable_laws: LEGAL_QUERIES.applicable_laws,
        user_rights: LEGAL_QUERIES.user_rights,
        violations_detected: LEGAL_QUERIES.violations_detected,
        step_by_step_actions: LEGAL_QUERIES.step_by_step_actions,
        legal_authorities_to_contact: LEGAL_QUERIES.legal_authorities_to_contact,
        documents_required: LEGAL_QUERIES.documents_required,
        time_limits: LEGAL_QUERIES.time_limits,
        recommended_legal_professionals: LEGAL_QUERIES.recommended_legal_professionals,
        risks_and_warnings: LEGAL_QUERIES.risks_and_warnings,
        notes_and_advice: LEGAL_QUERIES.notes_and_advice,
        law_reference_source: LEGAL_QUERIES.law_reference_source,
        created_at: LEGAL_QUERIES.created_at,
      })
      .from(LEGAL_QUERIES)
      .where(eq(LEGAL_QUERIES.user_id, userId))
      .orderBy(desc(LEGAL_QUERIES.created_at))
      .limit(20); // Limit to last 20 queries

    // Transform the data to match the frontend expectation
    const transformedQueries = queries.map(query => ({
      id: query.id,
      original_issue: query.original_issue,
      issue_summary: query.issue_summary,
      legal_context: {
        applicable_laws: query.applicable_laws,
        user_rights: query.user_rights,
        violations_detected: query.violations_detected
      },
      required_procedures: {
        step_by_step_actions: query.step_by_step_actions,
        legal_authorities_to_contact: query.legal_authorities_to_contact,
        documents_required: query.documents_required,
        time_limits: query.time_limits
      },
      recommended_legal_professionals: query.recommended_legal_professionals,
      risks_and_warnings: query.risks_and_warnings,
      notes_and_advice: query.notes_and_advice,
      law_reference_source: query.law_reference_source,
      created_at: query.created_at,
      disclaimer: "This response is generated by AI for general legal understanding. It is not official legal advice. Please consult a licensed lawyer before taking any legal action."
    }));

    return NextResponse.json(
      { queries: transformedQueries, count: queries.length },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error fetching user queries:", error);
    return NextResponse.json(
      { message: "Error fetching user queries", details: error.message },
      { status: 500 }
    );
  }
}