import { NextResponse } from "next/server";
import axios from "axios";
import { db } from "@/utils";
import { USERS, LEGAL_QUERIES } from "@/utils/schema";
import { eq } from "drizzle-orm";

export const maxDuration = 300;
export const dynamic = 'force-dynamic';

export async function POST(req) {
    try {
        const { country, state, age, locality="KAliyakkavilai",incident_place = "", gender, problem, userId } = await req.json();
        // Input validation
        if (!country || !age || !gender || !problem || !userId) {
            return NextResponse.json(
                { error: "Missing required fields" },
                { status: 400 }
            );
        }

        // Check if user exists, if not create one
        const existingUser = await db
            .select()
            .from(USERS)
            .where(eq(USERS.id, userId))
            .limit(1);

        if (existingUser.length === 0) {
            await db.insert(USERS).values({
                id: userId
            });
        }
        
// const prompt = `You are a helpful, professional AI legal assistant. Based on the following case details:

// - Country: ${country}
// - State: ${state}
// - Town/Locality: ${locality}
// - Age: ${age}
// - Gender: ${gender}
// - Legal Issue: "${problem}"

// Your goal is to guide the user like a **friendly and informed legal assistant**. Assume they are in a stressful or unfamiliar situation and need clear guidance.

// Give two parts in your response:

// ---

// 1. **human_response**  
// This should feel conversational, warm, and reassuring. Provide a helpful overview of:
// - What the issue might be
// - What the user should do first
// - What not to do
// - Where to go or whom to contact
// - What documents or evidence to collect
// - Which kind of lawyer or service to approach if needed

// Use simple, non-technical language. Add a touch of empathy. Do **not** include law names or numbers here. This is what a person reads first.

// ---

// 2. **structured_response**  
// A structured JSON object with legal analysis ‚Äî suitable for saving in database. It should include:

// \`\`\`json
// {
//   "issue_summary": "...",
//   "legal_context": {
//     "applicable_laws": "...",
//     "user_rights": "...",
//     "violations_detected": "..."
//   },
//   "required_procedures": {
//     "step_by_step_actions": ["...", "...", "..."],
//     "legal_authorities_to_contact": "...",
//     "documents_required": ["..."],
//     "time_limits": "..."
//   },
//   "recommended_legal_professionals": [
//     {
//       "type": "...",
//       "specialization": "...",
//       "region": "..."
//     }
//   ],
//   "risks_and_warnings": "...",
//   "notes_and_advice": "...",
//   "law_reference_source": "..."
// }
// \`\`\`

// Use **BNS/BNSS/BSA only if relevant**, but **do not restrict yourself** to only those. Use any law or rule that actually helps the user.

// If any field is not applicable, use **null**. Do not include extra text outside the JSON.

// Make sure both parts are accurate and user-friendly.
// `;


        // "similar_past_cases": [
        //     {
        //     "title": "Name or short summary of a similar case",
        //     "summary": "Brief description of what happened and outcome",
        //     "reference_link": "URL to case law, article, or legal source (if available)"
        //     }
        // ],
        // "disclaimer": "This response is generated by AI for general legal understanding. It is not official legal advice. Please consult a licensed lawyer before taking any legal action."

        // Make request to OpenAI API
        
        const prompt = `You are a smart, calm, and kind legal assistant ‚Äî like a junior lawyer who deeply understands the law and knows how to speak in a helpful, human way.

        A user has just described a legal problem. Based on the details below, respond in a way that helps them know **exactly what to do next**, especially in the **first few minutes or hours after something happens**.

        This is not just about legal theory ‚Äî the user may be confused or anxious. They want guidance that is quick, clear, and trustworthy.

        ---

        ### User Details:
        - Country: ${country}
        - State: ${state}
        - Locality: ${locality}
        - Age: ${age}
        - Gender: ${gender}
        - Legal Issue: "${problem}"
        ${incident_place ? `- Place of Incident: ${incident_place}` : ''}

        ---

        ### What You Must Return (Output in **JSON format**):

        \`\`\`json
        {
        "ai_intro": "A friendly and calming paragraph ‚Äî reassure the user and briefly acknowledge what their situation sounds like.",
        "summary": "Explain what the issue is in legal terms ‚Äî type of case (civil, criminal, consumer, etc.), and what's at stake.",
        "next_steps": [
            "List clear, immediate steps the user should take right now.",
            "Include things like filing a complaint, collecting documents, contacting someone, or NOT doing something risky."
        ],
        "know_your_rights": [
            "List what rights the user has ‚Äî what they are allowed to do, refuse, request, or protect."
        ],
        "applicable_laws": [
            "List relevant laws, sections, and acts with short descriptions.",
            "For India (post-July 1, 2024), include updated laws if applicable:",
            "- Bharatiya Nyaya Sanhita (BNS), 2023",
            "- Bharatiya Nagarik Suraksha Sanhita (BNSS), 2023",
            "- Bharatiya Sakshya Adhiniyam (BSA), 2023",
            "Also include other relevant acts like Motor Vehicle Act, Consumer Protection Act, etc.",
            "For non-Indian users, refer to their national or state laws."
        ],
        "possible_fines_or_penalties": [
            "Mention only if applicable ‚Äî e.g., fines, jail time, license cancellation, or legal warnings.",
            "If none, return null."
        ],
        "important_warnings": [
            "Cautions to avoid legal mistakes or escalation.",
            "If no specific warning, return null."
        ],
        "should_escalate_to_lawyer": [
            "Say whether a lawyer is needed now, or if the user can proceed alone.",
            "Mention type of lawyer and region if applicable."
        ],
        "additional_advice": [
            "Tips like what documents to collect, how to talk to police, timelines, etc."
        ],
        "final_reassurance": "One last encouraging message ‚Äî human, calm, and supportive.",
        "law_reference_source": "Mention which legal acts or systems were referenced ‚Äî e.g., 'BNS, BNSS, Motor Vehicle Act (India)', etc."
        }
        \`\`\`

        ---

        ### Key Instructions:
        - ‚úÖ Be friendly, respectful, and human ‚Äî like a **junior lawyer** offering calm guidance.
        - ‚ö†Ô∏è Use **a mix of paragraph, bullets, and step-by-step**. Avoid dumping everything in one paragraph.
        - üéØ Focus on **what the user should do immediately** after the incident.
        - üìö Include **only laws that actually apply** to the case. Do not force-fit BNS/BNSS/BSA.
        - üß† Use **"incident_place"** in your analysis if it's provided. Ignore it if not.
        - üåç Adapt to user's country and region accurately.
        - üí° Keep it helpful, real, and legally sound.
        - üß© Return "null" for any field you cannot answer confidently.

        **Output only valid JSON. No markdown or extra text.**
        `;

        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4.1-nano",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 3000,
                temperature: 0.3,
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                    "Content-Type": "application/json",
                },
            }
        );

        // Parse the response
        let responseText = response.data.choices[0].message.content.trim();
        responseText = responseText.replace(/```json|```/g, "").trim();

        console.log('AI Response:', responseText);

        let legalAdviceData;
        try {
            legalAdviceData = JSON.parse(responseText);
            } catch (jsonError) {
                console.error("Error parsing JSON response:", jsonError);
                return NextResponse.json(
                    { error: "Failed to parse the legal advice response" },
                    { status: 500 }
                );
            }

        // Save to database
        try {
            const queryRecord = {
                user_id: userId,
                original_issue: problem,
                issue_summary: legalAdviceData.issue_summary || null,
                applicable_laws: legalAdviceData.legal_context?.applicable_laws || null,
                user_rights: legalAdviceData.legal_context?.user_rights || null,
                violations_detected: legalAdviceData.legal_context?.violations_detected || null,
                step_by_step_actions: legalAdviceData.required_procedures?.step_by_step_actions || null,
                legal_authorities_to_contact: legalAdviceData.required_procedures?.legal_authorities_to_contact || null,
                documents_required: legalAdviceData.required_procedures?.documents_required || null,
                time_limits: legalAdviceData.required_procedures?.time_limits || null,
                recommended_legal_professionals: legalAdviceData.recommended_legal_professionals || null,
                risks_and_warnings: legalAdviceData.risks_and_warnings || null,
                notes_and_advice: legalAdviceData.notes_and_advice || null,
                law_reference_source: legalAdviceData.law_reference_source || null,
            };

            const insertResult = await db.insert(LEGAL_QUERIES).values(queryRecord);
            console.log('Saved to database:', insertResult);

        } catch (dbError) {
            console.log("Error saving to database:", dbError);
            // Continue with response even if DB save fails
        }

        // Return the legal advice with full structure including similar_past_cases
        return NextResponse.json({ 
            content: {
                ...legalAdviceData,
                // Ensure all fields are present for frontend
                legal_context: legalAdviceData.legal_context || {},
                required_procedures: legalAdviceData.required_procedures || {},
                recommended_legal_professionals: legalAdviceData.recommended_legal_professionals || [],
                similar_past_cases: legalAdviceData.similar_past_cases || []
            }
        }, { status: 200 });

    } catch (error) {
        console.error("API Error:", error.response?.data || error.message);

        return NextResponse.json(
            {
                error: "Failed to generate legal advice",
                details: error.message,
            },
            { status: 500 }
        );
    }
}