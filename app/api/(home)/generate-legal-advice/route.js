import { NextResponse } from "next/server";
import axios from "axios";
import { db } from "@/utils";
import { USERS, LEGAL_QUERIES } from "@/utils/schema";
import { eq } from "drizzle-orm";

export const maxDuration = 300;
export const dynamic = 'force-dynamic';

export async function POST(req) {
    try {
        const { country, state, age, gender, problem, userId } = await req.json();

        // Input validation
        if (!country || !age || !gender || !problem || !userId) {
            return NextResponse.json(
                { error: "Missing required fields" },
                { status: 400 }
            );
        }

        // Check if user exists, if not create one
        const existingUser = await db
            .select()
            .from(USERS)
            .where(eq(USERS.id, userId))
            .limit(1);

        if (existingUser.length === 0) {
            await db.insert(USERS).values({
                id: userId
            });
        }
        
        const prompt = `You are an AI legal assistant. Based on the following case details:

        - Country: ${country}
        - State: ${state}
        - Age: ${age}
        - Gender: ${gender}
        - Legal Issue: "${problem}"

        Your task is to analyze this situation legally and return a structured JSON response. Your output must be detailed, factual, and suitable for saving in a legal case database. Tailor your response to Indian law if the country is India, using the **updated criminal codes (post July 1, 2024)**:

        - Use **Bharatiya Nyaya Sanhita (BNS), 2023** instead of IPC  
        - Use **Bharatiya Nagarik Suraksha Sanhita (BNSS), 2023** instead of CrPC  
        - Use **Bharatiya Sakshya Adhiniyam (BSA), 2023** instead of the Indian Evidence Act  

        For non-Indian users, use appropriate laws of that country/state.

        Respond strictly in the JSON format below. If any information is not available, return the value as **null**. Do not return strings like "Not applicable" or "Unknown". Do not include explanations or extra text outside the JSON.

        \`\`\`json
        {
        "issue_summary": "Restate the user's legal problem in proper legal terms. Identify which type of law applies (civil, criminal, consumer, etc.).",
        "legal_context": {
            "applicable_laws": "List all applicable laws, acts, or codes for this case. If in India, prefer new codes (BNS/BNSS/BSA) with section numbers if known.",
            "user_rights": "Explain what rights the user has under these laws. Mention clauses or articles if possible.",
            "violations_detected": "List any laws or contracts potentially violated. If none, return null."
        },
        "required_procedures": {
            "step_by_step_actions": [
            "Detailed action 1",
            "Action 2...",
            "Final step..."
            ],
            "legal_authorities_to_contact": "Mention relevant bodies: police, consumer forum, RERA, district court, etc.",
            "documents_required": [
            "List of key documents the user should gather or submit (e.g., invoice, rental agreement, medical report)"
            ],
            "time_limits": "Mention any deadlines for filing or actions (e.g., 'File complaint within 30 days'). If none, return null."
        },
        "recommended_legal_professionals": [
            {
            "type": "Lawyer / NGO / Legal Aid / Consultant",
            "specialization": "E.g., Cyber law, Consumer law, Criminal law",
            "region": "Suggested location or jurisdiction"
            }
        ],
        "risks_and_warnings": "List any risks involved (e.g., retaliation, counter-cases, penalties). If none, return null.",

        "notes_and_advice": "Additional useful information not covered in above fields. General suggestions, observations, or next steps.",
        "law_reference_source": "Mention whether laws used are from BNS, BNSS, BSA (India), or equivalent acts of the relevant country.",
        }
        \`\`\`

        **Important Instructions:**
        - Be factual, detailed, and legally accurate.
        - Do not use casual or vague language.
        - Output must be valid JSON and follow this format exactly.
        - Use null only if the field truly has no answer.
        `;

        // "similar_past_cases": [
        //     {
        //     "title": "Name or short summary of a similar case",
        //     "summary": "Brief description of what happened and outcome",
        //     "reference_link": "URL to case law, article, or legal source (if available)"
        //     }
        // ],
        // "disclaimer": "This response is generated by AI for general legal understanding. It is not official legal advice. Please consult a licensed lawyer before taking any legal action."

        // Make request to OpenAI API
        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 3000,
                temperature: 0.3,
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                    "Content-Type": "application/json",
                },
            }
        );

        // Parse the response
        let responseText = response.data.choices[0].message.content.trim();
        responseText = responseText.replace(/```json|```/g, "").trim();

        console.log('AI Response:', responseText);

        let legalAdviceData;
        try {
            legalAdviceData = JSON.parse(responseText);
        } catch (jsonError) {
            console.error("Error parsing JSON response:", jsonError);
            return NextResponse.json(
                { error: "Failed to parse the legal advice response" },
                { status: 500 }
            );
        }

        // Save to database
        try {
            const queryRecord = {
                user_id: userId,
                original_issue: problem,
                issue_summary: legalAdviceData.issue_summary || null,
                applicable_laws: legalAdviceData.legal_context?.applicable_laws || null,
                user_rights: legalAdviceData.legal_context?.user_rights || null,
                violations_detected: legalAdviceData.legal_context?.violations_detected || null,
                step_by_step_actions: legalAdviceData.required_procedures?.step_by_step_actions || null,
                legal_authorities_to_contact: legalAdviceData.required_procedures?.legal_authorities_to_contact || null,
                documents_required: legalAdviceData.required_procedures?.documents_required || null,
                time_limits: legalAdviceData.required_procedures?.time_limits || null,
                recommended_legal_professionals: legalAdviceData.recommended_legal_professionals || null,
                risks_and_warnings: legalAdviceData.risks_and_warnings || null,
                notes_and_advice: legalAdviceData.notes_and_advice || null,
                law_reference_source: legalAdviceData.law_reference_source || null,
            };

            const insertResult = await db.insert(LEGAL_QUERIES).values(queryRecord);
            console.log('Saved to database:', insertResult);

        } catch (dbError) {
            console.log("Error saving to database:", dbError);
            // Continue with response even if DB save fails
        }

        // Return the legal advice with full structure including similar_past_cases
        return NextResponse.json({ 
            content: {
                ...legalAdviceData,
                // Ensure all fields are present for frontend
                legal_context: legalAdviceData.legal_context || {},
                required_procedures: legalAdviceData.required_procedures || {},
                recommended_legal_professionals: legalAdviceData.recommended_legal_professionals || [],
                similar_past_cases: legalAdviceData.similar_past_cases || []
            }
        }, { status: 200 });

    } catch (error) {
        console.error("API Error:", error.response?.data || error.message);

        return NextResponse.json(
            {
                error: "Failed to generate legal advice",
                details: error.message,
            },
            { status: 500 }
        );
    }
}